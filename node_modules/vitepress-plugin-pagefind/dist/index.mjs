// src/index.ts
import path2 from "node:path";
import { fileURLToPath } from "node:url";
import process2 from "node:process";
import { stringify } from "javascript-stringify";

// src/node.ts
import fs from "node:fs";
import { execSync, spawn, spawnSync } from "node:child_process";
import path from "node:path";
import os from "node:os";
import process from "node:process";
import matter from "gray-matter";
import glob from "fast-glob";

// src/utils/index.ts
function formatDate(d, fmt = "yyyy-MM-dd hh:mm:ss") {
  if (!(d instanceof Date)) {
    d = new Date(d);
  }
  const o = {
    "M+": d.getMonth() + 1,
    // 月份
    "d+": d.getDate(),
    // 日
    "h+": d.getHours(),
    // 小时
    "m+": d.getMinutes(),
    // 分
    "s+": d.getSeconds(),
    // 秒
    "q+": Math.floor((d.getMonth() + 3) / 3),
    // 季度
    "S": d.getMilliseconds()
    // 毫秒
  };
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(
      RegExp.$1,
      `${d.getFullYear()}`.substr(4 - RegExp.$1.length)
    );
  }
  for (const k in o) {
    if (new RegExp(`(${k})`).test(fmt))
      fmt = fmt.replace(
        RegExp.$1,
        RegExp.$1.length === 1 ? o[k] : `00${o[k]}`.substr(`${o[k]}`.length)
      );
  }
  return fmt;
}

// src/node.ts
function getPagesData(srcDir, config, pluginSiteConfig2) {
  const files = glob.sync(`${srcDir}/**/*.md`, { ignore: ["node_modules"] });
  return files.map((file) => {
    const route = config.site.base + normalizePath(path.relative(config.srcDir, file)).replace(/(^|\/)index\.md$/, "$1").replace(/\.md$/, config.cleanUrls ? "" : ".html");
    const fileContent = fs.readFileSync(file, "utf-8");
    const { data: frontmatter, excerpt } = matter(fileContent, {
      excerpt: true
    });
    const meta = {
      description: excerpt,
      ...frontmatter
    };
    if (!meta.title) {
      meta.title = getDefaultTitle(fileContent);
    }
    if (!meta.date) {
      meta.date = getFileBirthTime(file);
    } else {
      const timeZone = pluginSiteConfig2?.timeZone ?? 8;
      meta.date = formatDate(
        /* @__PURE__ */ new Date(`${new Date(meta.date).toUTCString()}+${timeZone}`)
      );
    }
    return {
      route,
      meta
    };
  }).filter((v) => v.meta.layout !== "home");
}
var windowsSlashRE = /\\/g;
var isWindows = os.platform() === "win32";
function slash(p) {
  return p.replace(windowsSlashRE, "/");
}
function normalizePath(id) {
  return path.posix.normalize(isWindows ? slash(id) : id);
}
function getDefaultTitle(content) {
  const title = clearMatterContent(content).split("\n")?.find((str) => {
    return str.startsWith("# ");
  })?.slice(2).replace(/[\s]/g, "") || "";
  return title;
}
function clearMatterContent(content) {
  let first___;
  let second___;
  const lines = content.split("\n").reduce((pre, line) => {
    if (!line.trim() && pre.length === 0) {
      return pre;
    }
    if (line.trim() === "---") {
      if (first___ === void 0) {
        first___ = pre.length;
      } else if (second___ === void 0) {
        second___ = pre.length;
      }
    }
    pre.push(line);
    return pre;
  }, []);
  return lines.slice(second___ || 0).join("\n");
}
function getFileBirthTime(url) {
  let date = /* @__PURE__ */ new Date();
  try {
    const infoStr = spawnSync("git", ["log", "-1", '--pretty="%ci"', url]).stdout?.toString().replace(/["']/g, "").trim();
    if (infoStr) {
      date = new Date(infoStr);
    }
  } catch (error) {
    return formatDate(date);
  }
  return formatDate(date);
}
var ignoreSelectors = [
  // 侧边栏内容
  "div.aside",
  // 标题锚点
  "a.header-anchor"
];
var EXTERNAL_URL_RE = /^[a-z]+:/i;
function joinPath(base, path3) {
  return `${base}${path3}`.replace(/\/+/g, "/");
}
function withBase(base, path3) {
  return EXTERNAL_URL_RE.test(path3) || path3.startsWith(".") ? path3 : joinPath(base, path3);
}
var pluginSiteConfig = {
  /**
   * TODO：支持更多pagefind配置项
   * vitepress buildEnd钩子调用
   */
  buildEnd(ctx) {
    const pagefindOps = ctx.PagefindOption;
    const ignore = [
      ...new Set(ignoreSelectors.concat(pagefindOps?.excludeSelector || []))
    ];
    const { log } = console;
    log();
    log("=== pagefind: https://pagefind.app/ ===");
    const siteDir = path.join(
      process.argv.slice(2)?.[1] || ".",
      ".vitepress/dist"
    );
    let command = `npx pagefind --site ${siteDir}`;
    if (ignore.length) {
      command += ` --exclude-selectors "${ignore.join(", ")}"`;
    }
    if (typeof pagefindOps.forceLanguage === "string") {
      command += ` --force-language ${pagefindOps.forceLanguage}`;
    }
    if (pagefindOps.indexingCommand) {
      command = pagefindOps.indexingCommand;
    }
    log(command);
    log();
    execSync(command, {
      stdio: "inherit"
    });
  },
  transformHead(ctx) {
    return [
      [
        "script",
        {},
        `import('${withBase(ctx.siteData.base || "", "/pagefind/pagefind.js")}')
    .then((module) => {
      window.__pagefind__ = module
      module.init()
    })
    .catch(() => {
      // console.log('not load /pagefind/pagefind.js')
    })`
      ]
    ];
  }
};
function chineseSearchOptimize(input) {
  return input.replace(/[\u4E00-\u9FA5]/g, " $& ").replace(/\s+/g, " ").trim();
}

// src/index.ts
function isESM() {
  return typeof __filename === "undefined" || typeof __dirname === "undefined";
}
function getDirname() {
  return isESM() ? path2.dirname(fileURLToPath(import.meta.url)) : __dirname;
}
var aliasSearchVueFile = `${getDirname()}/../src/Search.vue`;
function pagefindPlugin(searchConfig = {}) {
  const virtualModuleId = "virtual:pagefind";
  const resolvedVirtualModuleId = `\0${virtualModuleId}`;
  let resolveConfig;
  const pluginOps = {
    name: "vitepress-plugin-pagefind",
    enforce: "pre",
    config: () => ({
      resolve: {
        alias: {
          "./VPNavBarSearch.vue": aliasSearchVueFile
        }
      }
    }),
    configResolved(config) {
      if (resolveConfig) {
        return;
      }
      resolveConfig = config;
      const vitepressConfig = config.vitepress;
      if (!vitepressConfig) {
        return;
      }
      const selfBuildEnd = vitepressConfig.buildEnd;
      vitepressConfig.buildEnd = (siteConfig) => {
        selfBuildEnd?.(siteConfig);
        siteConfig = Object.assign(siteConfig || {}, {
          PagefindOption: searchConfig
        });
        pluginSiteConfig?.buildEnd?.(siteConfig);
      };
      const selfTransformHead = vitepressConfig.transformHead;
      vitepressConfig.transformHead = async (ctx) => {
        const selfHead = await Promise.resolve(selfTransformHead?.(ctx)) || [];
        const pluginHead = await Promise.resolve(pluginSiteConfig?.transformHead?.(ctx)) || [];
        return selfHead.concat(pluginHead);
      };
    },
    async resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId;
      }
    },
    // 文章数据
    load(id) {
      if (id !== resolvedVirtualModuleId)
        return;
      const srcDir = resolveConfig.vitepress.srcDir.replace(resolveConfig.vitepress.root, "").replace(/^\//, "") || process2.argv.slice(2)?.[1] || ".";
      const docsData = getPagesData(
        srcDir,
        resolveConfig.vitepress,
        searchConfig
      );
      return `
      import { ref } from 'vue'
      export const docs = ref(${JSON.stringify(docsData)})
      export const searchConfig = ${stringify(searchConfig)}
      `;
    },
    // 添加检索的内容标识
    transform(code, id) {
      if (id.endsWith("theme-default/Layout.vue")) {
        return code.replace("<VPContent>", "<VPContent data-pagefind-body>");
      }
      return code;
    }
  };
  return pluginOps;
}
export {
  chineseSearchOptimize,
  pagefindPlugin
};
