import type { ItemInfo, Noop } from './types';
declare const _sfc_main: import("vue").DefineComponent<{}, {
    SELECT_EVENT: string;
    VALUE_ATTR: string;
    props: {
        shortcut?: string[] | undefined;
        perform?: Noop | undefined;
    };
    emit: (e: 'select', itemInfo: ItemInfo) => void;
    current: Set<string>;
    selectedNode: import("vue").Ref<string>;
    filtered: import("vue").Ref<{
        count: number;
        items: Map<string, any>;
        groups: Set<string>;
    }>;
    isSearching: import("vue").ComputedRef<boolean>;
    emitter: import("mitt").Emitter<{
        selectItem: ItemInfo;
        rerenderList: Boolean;
    }>;
    itemRef: import("vue").Ref<HTMLDivElement | undefined>;
    itemId: import("vue").ComputedRef<string>;
    isRender: import("vue").ComputedRef<boolean>;
    currentKeys: import("vue").ComputedRef<string[]>;
    handleSelect: () => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "select"[], "select", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onSelect?: ((...args: any[]) => any) | undefined;
}, {}>;
export default _sfc_main;
